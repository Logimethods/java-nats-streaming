
plugins {
    id 'java-library'
    id 'java'
    id 'jacoco'
    id 'maven'
    id 'signing'
    id 'com.github.kt3k.coveralls' version '2.6.3'
    id 'com.google.protobuf' version '0.8.6'
    id "io.codearte.nexus-staging" version "0.11.0"
    id 'osgi'
}

// Update version here, repeated check-ins not into master will have snapshot on them
def versionMajor = 2
def versionMinor = 1
def versionPatch = 2
def versionModifier = ""
def jarVersion = "2.1.2"
def branch = System.getenv("TRAVIS_BRANCH");

def getVersionName = { ->
    if ("true".equals(System.getenv("TRAVIS_PULL_REQUEST")) || !"master".equals(branch))  {
        versionModifier = "-SNAPSHOT"
    }

    if (versionModifier != null && versionModifier.length() > 0) {
        return "" + versionMajor + "." + versionMinor + "." + versionPatch + versionModifier
    } else {
        return "" + versionMajor + "." + versionMinor + "." + versionPatch
    }
}

version = getVersionName()
archivesBaseName = 'java-nats-streaming'
group = 'io.nats'

// Get signing properties set up from outside (env var can't handle the dot)
if (System.getenv('SONATYPE_USERNAME') != null) {
    project.ext['ossrhUsername'] = System.getenv('SONATYPE_USERNAME')
    project.ext['ossrhPassword'] = System.getenv('SONATYPE_PASSWORD')
    project.ext['signing.secretKeyRingFile'] = System.getenv('GPG_KEYRING_FILE')
    project.ext['signing.keyId'] = System.getenv('GPG_KEY_ID')
    project.ext['signing.password'] =  System.getenv('GPG_KEY_PASSPHRASE')
}

repositories {
    jcenter()
    maven {
        url "https://oss.sonatype.org/content/repositories/releases"
    }
}

dependencies {
    compile 'com.google.protobuf:protobuf-java:[3.6,4.0)'

    testImplementation 'junit:junit:4.12'

    implementation 'io.nats:jnats:[2.1.0,)'
}

sourceSets {
    generated {
        java.srcDirs = ['gen/main/java']
    }
    main {
        java {
            srcDirs = ['src/main/java', 'src/examples/java', 'gen/main/java']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

osgiClasses {
    exclude("io/nats/examples/**")
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.6+'
    }

    generateProtoTasks.generatedFilesBaseDir = 'gen'

    generateProtoTasks {
        all().each { task ->
        }
        ofSourceSet('generated')
    }   
}

compileGeneratedJava {
    options.warnings = false
}

clean {
    delete protobuf.generatedFilesBaseDir
}

jar {
    manifest {
        attributes('Implementation-Title': 'Java Nats Streaming',
                   'Implementation-Version': jarVersion,
                   'Implementation-Vendor': 'nats.io')
    }
    exclude("io/nats/streaming/examples/**")
}

test {
    maxHeapSize = "2g"
    if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
        jvmArgs '-Djava.security.egd=file:/dev/./urandom'
    }
    testLogging {
        exceptionFormat = 'full'
        events "started", "passed", "skipped", "failed"
    }
}

javadoc {
    options.overview = 'src/main/javadoc/overview.html' // relative to source root
    source = sourceSets.main.allJava
    title = "NATS.IO Java Streaming API"
    excludes = ['io/nats/streaming/examples','io/nats/streaming/protobuf']
    classpath = sourceSets.main.runtimeClasspath
    doLast {
            exec {
                println "Updating favicon on all html files"
                workingDir 'build/docs/javadoc'
                // Only on linux, mac at this point
                commandLine 'find', '.', '-name', '*.html', '-exec', 'sed', '-i', '-e', 's#<head>#<head><link rel="icon" type="image/ico" href="favicon.ico">#', '{}', ';'
            }
            copy {
                println "Copying images to javadoc folder"
                from 'src/main/javadoc/images'
                into 'build/docs/javadoc'
            }
        }
}

task examplesJar(type: Jar) {
    classifier = 'examples'
    manifest {
        attributes('Implementation-Title': 'Java Nats Streaming Examples',
                   'Implementation-Version': jarVersion,
                   'Implementation-Vendor': 'nats.io')
    }
    from(sourceSets.main.output) {
        include "io/nats/streaming/examples/**"
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
    afterEvaluate { // only report on main library not examples
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/examples**', '**/protobuf**'])
        })
    }
}

artifacts {
    archives javadocJar, sourcesJar, examplesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://$buildDir/repos")
            if (project.hasProperty("local_archives") || ("true".equals(System.getenv("TRAVIS_PULL_REQUEST")))) {
                repository(url: "file://$buildDir/repos")
            } else {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: project.getProperty('ossrhUsername'), password: project.getProperty('ossrhPassword'))
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: project.getProperty('ossrhUsername'), password: project.getProperty('ossrhPassword'))
                }
            }

            pom.project {
                name 'jnats'
                packaging 'jar'
                description 'Client library for working with the NATS messaging system.'
                url 'https://github.com/nats-io/java-nats'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id="synadia"
                        name "Synadia"
                        email "info@synadia.com"
                        url "https://nats.io"
                    }
                }
                scm {
                    url = 'https://github.com/nats-io/java-nats'
                }
            }
        }
    }
}
